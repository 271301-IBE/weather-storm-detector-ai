#!/usr/bin/env python3
"""Kompletn√≠ test cel√©ho syst√©mu p≈ôed spu≈°tƒõn√≠m."""

import sys
import os
import asyncio
import traceback
from datetime import datetime

# Add project root to path
sys.path.insert(0, '/home/pi/weather-storm-detector')

def test_imports():
    """Test v≈°ech kl√≠ƒçov√Ωch import≈Ø."""
    print("üîç TESTOV√ÅN√ç IMPORT≈Æ...")
    
    try:
        from config import load_config
        print("‚úÖ Config")
        
        from models import WeatherData, StormAnalysis, AlertLevel
        print("‚úÖ Models")
        
        from data_fetcher import WeatherDataCollector
        print("‚úÖ Data Fetcher")
        
        from ai_analysis import StormDetectionEngine
        print("‚úÖ AI Analysis")
        
        from email_notifier import EmailNotifier
        print("‚úÖ Email Notifier (NOV√ù)")
        
        from pdf_generator import WeatherReportGenerator
        print("‚úÖ PDF Generator")
        
        from storage import WeatherDatabase
        print("‚úÖ Storage")
        
        from chmi_warnings import ChmiWarningMonitor
        print("‚úÖ ƒåHM√ö Monitor")
        
        from scheduler import WeatherMonitoringScheduler
        print("‚úÖ Scheduler")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Import error: {e}")
        traceback.print_exc()
        return False

def test_config():
    """Test konfigurace."""
    print("\nüîß TESTOV√ÅN√ç KONFIGURACE...")
    
    try:
        from config import load_config
        config = load_config()
        
        # Check essential config
        assert config.weather.openweather_api_key, "OpenWeather API kl√≠ƒç chyb√≠"
        assert config.weather.visual_crossing_api_key, "Visual Crossing API kl√≠ƒç chyb√≠"
        assert config.ai.deepseek_api_key, "DeepSeek API kl√≠ƒç chyb√≠"
        assert config.email.sender_email, "Email odes√≠latele chyb√≠"
        assert config.email.sender_password, "Email heslo chyb√≠"
        
        print(f"‚úÖ Monitoring lokace: {config.weather.city_name}, {config.weather.region}")
        print(f"‚úÖ Monitoring interval: {config.system.monitoring_interval_minutes} minut")
        print(f"‚úÖ Storm confidence threshold: {config.ai.storm_confidence_threshold:.1%}")
        print(f"‚úÖ Email recipient: {config.email.recipient_email}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Config error: {e}")
        return False

async def test_weather_data():
    """Test z√≠sk√°v√°n√≠ meteorologick√Ωch dat."""
    print("\nüå§Ô∏è TESTOV√ÅN√ç METEOROLOGICK√ùCH DAT...")
    
    try:
        from config import load_config
        from data_fetcher import WeatherDataCollector
        
        config = load_config()
        collector = WeatherDataCollector(config)
        
        print("üì° Z√≠sk√°v√°m data z OpenWeather + Visual Crossing...")
        weather_data = await collector.collect_weather_data()
        
        if weather_data:
            print(f"‚úÖ Z√≠sk√°no {len(weather_data)} datov√Ωch sad")
            for data in weather_data:
                print(f"   üìä {data.source}: {data.temperature:.1f}¬∞C, {data.humidity:.0f}%, {data.description}")
        else:
            print("‚ùå ≈Ω√°dn√° data z√≠sk√°na")
            return False
            
        return True
        
    except Exception as e:
        print(f"‚ùå Weather data error: {e}")
        traceback.print_exc()
        return False

def test_chmi_warnings():
    """Test ƒåHM√ö varov√°n√≠."""
    print("\nüèõÔ∏è TESTOV√ÅN√ç ƒåHM√ö VAROV√ÅN√ç...")
    
    try:
        from config import load_config
        from chmi_warnings import ChmiWarningMonitor
        
        config = load_config()
        monitor = ChmiWarningMonitor(config)  # Brno
        warnings = monitor.get_all_active_warnings()

        
        print(f"‚úÖ Nalezeno {len(warnings)} aktivn√≠ch varov√°n√≠")
        for warning in warnings:
            print(f"   üö® {warning.event} ({warning.color}) - {warning.time_start_text}")
            
        return True
        
    except Exception as e:
        print(f"‚ùå ƒåHM√ö warnings error: {e}")
        traceback.print_exc()
        return False

def test_database():
    """Test datab√°ze."""
    print("\nüíæ TESTOV√ÅN√ç DATAB√ÅZE...")
    
    try:
        from config import load_config
        from storage import WeatherDatabase
        
        config = load_config()
        db = WeatherDatabase(config)
        
        # Test connection
        print("‚úÖ Datab√°zov√© p≈ôipojen√≠ OK")
        
        # Get some stats
        recent_data = db.get_recent_weather_data(hours=24)
        print(f"‚úÖ Posledn√≠ch 24h: {len(recent_data)} meteorologick√Ωch z√°znam≈Ø")
        
        last_analysis = db.get_last_storm_analysis()
        if last_analysis:
            print(f"‚úÖ Posledn√≠ AI anal√Ωza: {last_analysis.timestamp.strftime('%d.%m. %H:%M')}")
        else:
            print("‚ÑπÔ∏è ≈Ω√°dn√° p≈ôedchoz√≠ AI anal√Ωza")
            
        return True
        
    except Exception as e:
        print(f"‚ùå Database error: {e}")
        traceback.print_exc()
        return False

def test_email_system():
    """Test nov√©ho email syst√©mu."""
    print("\nüìß TESTOV√ÅN√ç NOV√âHO EMAIL SYST√âMU...")
    
    try:
        from config import load_config
        from email_notifier import EmailNotifier
        from models import AlertLevel
        
        config = load_config()
        notifier = EmailNotifier(config)
        
        # Test filtering logic
        print("üîç Testov√°n√≠ filtrov√°n√≠...")
        
        # Test LOW level (should be skipped)
        from test_emails import create_sample_storm_analysis, create_sample_weather_data
        low_analysis = create_sample_storm_analysis(AlertLevel.LOW)
        notification = notifier.send_storm_alert(low_analysis)
        
        if notification.message_type == "storm_alert_skipped":
            print("‚úÖ LOW level alerts correctly skipped")
        else:
            print("‚ùå LOW level alerts not being filtered")
            return False
            
        # Test HIGH level (should work)
        high_analysis = create_sample_storm_analysis(AlertLevel.HIGH)
        weather_data = create_sample_weather_data()
        
        # Create email (but don't send)
        msg = notifier._create_storm_alert_email(high_analysis, weather_data)
        if "üö® BOU≈òE NAD BRNEM - HIGH" in msg['Subject']:
            print("‚úÖ HIGH level alert email format OK")
        else:
            print("‚ùå HIGH level alert format incorrect")
            return False
            
        print("‚úÖ Email syst√©m funguje - pouze HIGH/CRITICAL")
        print("‚úÖ Denn√≠ emaily vypnut√©")
        print("‚úÖ ƒåHM√ö emaily filtrovan√© na bou≈ôky/sr√°≈æky")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Email system error: {e}")
        traceback.print_exc()
        return False

async def test_ai_analysis():
    """Test AI anal√Ωzy (jen pokud jsou storm podm√≠nky)."""
    print("\nü§ñ TESTOV√ÅN√ç AI ANAL√ùZY...")
    
    try:
        from config import load_config
        from ai_analysis import StormDetectionEngine
        from storage import WeatherDatabase
        from scheduler import WeatherMonitoringScheduler
        
        config = load_config()
        engine = StormDetectionEngine(config)
        db = WeatherDatabase(config)
        scheduler = WeatherMonitoringScheduler(config)
        
        # Get recent weather data
        weather_data = await test_weather_data_for_ai()
        if not weather_data:
            print("‚ö†Ô∏è P≈ôeskakuji AI test - ≈æ√°dn√° meterologick√° data")
            return True
            
        # Check if AI analysis should run (cost optimization)
        should_run = scheduler._should_run_ai_analysis(weather_data, [])
        
        if should_run:
            print("üî• Podm√≠nky pro AI anal√Ωzu splnƒõny - spou≈°t√≠m...")
            historical_data = db.get_recent_weather_data(hours=6)
            analysis = await engine.analyze_storm_potential(weather_data, historical_data, [])
            
            print(f"‚úÖ AI anal√Ωza dokonƒçena: {analysis.alert_level.value} (confidence: {analysis.confidence_score:.1%})")
        else:
            print("‚úÖ AI anal√Ωza p≈ôeskoƒçena - norm√°ln√≠ podm√≠nky (√∫spora n√°klad≈Ø)")
            
        return True
        
    except Exception as e:
        print(f"‚ùå AI analysis error: {e}")
        traceback.print_exc()
        return False

async def test_weather_data_for_ai():
    """Helper pro z√≠sk√°n√≠ dat pro AI test."""
    try:
        from config import load_config
        from data_fetcher import WeatherDataCollector
        
        config = load_config()
        collector = WeatherDataCollector(config)
        return await collector.collect_weather_data()
    except:
        return None

async def main():
    """Hlavn√≠ test funkce."""
    print("üöÄ KOMPLETN√ç TEST SYST√âMU")
    print("=" * 50)
    
    tests = [
        ("Importy", test_imports, False),
        ("Konfigurace", test_config, False),
        ("Meteorologick√° data", test_weather_data, True),
        ("ƒåHM√ö varov√°n√≠", test_chmi_warnings, False),
        ("Datab√°ze", test_database, False),
        ("Email syst√©m", test_email_system, False),
        ("AI anal√Ωza", test_ai_analysis, True),
    ]
    
    results = []
    
    for test_name, test_func, is_async in tests:
        print(f"\n{'='*20}")
        print(f"üß™ {test_name.upper()}")
        print(f"{'='*20}")
        
        try:
            if is_async:
                result = await test_func()
            else:
                result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå Test {test_name} failed: {e}")
            results.append((test_name, False))
    
    # Summary
    print("\n" + "="*50)
    print("üìä SHRNUT√ç TEST≈Æ")
    print("="*50)
    
    passed = 0
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ PASSED" if result else "‚ùå FAILED"
        print(f"{status} - {test_name}")
        if result:
            passed += 1
    
    print(f"\nüéØ V√ùSLEDEK: {passed}/{total} test≈Ø pro≈°lo")
    
    if passed == total:
        print("\nüéâ V≈†ECHNY TESTY PRO≈†LY!")
        print("‚úÖ Syst√©m je p≈ôipraven ke spu≈°tƒõn√≠")
        print("\nüìã FIN√ÅLN√ç KONFIGURACE:")
        print("  ‚Ä¢ Pouze HIGH/CRITICAL storm alerts")
        print("  ‚Ä¢ ƒåHM√ö emaily jen pro bou≈ôky/sr√°≈æky/extr√©mn√≠")
        print("  ‚Ä¢ Denn√≠ emaily vypnuty")
        print("  ‚Ä¢ V≈°e v ƒçe≈°tinƒõ")
        print("  ‚Ä¢ AI optimalizace n√°klad≈Ø aktivn√≠")
        return True
    else:
        print(f"\n‚ùå {total-passed} test≈Ø selhalo")
        print("üîß Opravte chyby p≈ôed spu≈°tƒõn√≠m syst√©mu")
        return False

if __name__ == "__main__":
    try:
        result = asyncio.run(main())
        sys.exit(0 if result else 1)
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è Test p≈ôeru≈°en u≈æivatelem")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• Neoƒçek√°van√° chyba: {e}")
        traceback.print_exc()
        sys.exit(1)